{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "from sklearn.metrics import confusion_matrix \n",
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.tree import DecisionTreeClassifier \n",
    "from sklearn.metrics import accuracy_score \n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn import tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function importing Dataset \n",
    "def importdata(): \n",
    "    data = pd.read_csv('decisiontree.csv') \n",
    "      \n",
    "    # Printing the dataswet shape \n",
    "    print (\"Dataset Lenght: \", len(data)) \n",
    "    print (\"Dataset Shape: \", data.shape) \n",
    "      \n",
    "    # Printing the dataset obseravtions \n",
    "    print (\"Dataset: \",data.head()) \n",
    "    return data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to split the dataset \n",
    "def splitdataset(data):\n",
    "    # Seperating the target variable \n",
    "    X = data.values[:, 1:5] \n",
    "    Y = data.values[:, 0] \n",
    "  \n",
    "    # Spliting the dataset into train and test \n",
    "    X_train, X_test, y_train, y_test = train_test_split(  \n",
    "    X, Y, test_size = 0.3, random_state = 100) \n",
    "      \n",
    "    return X, Y, X_train, X_test, y_train, y_test "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Function to perform training with giniIndex. \n",
    "def train_using_gini(X_train, X_test, y_train): \n",
    "  \n",
    "    # Creating the classifier object \n",
    "    clf_gini = DecisionTreeClassifier(criterion = \"gini\", \n",
    "            random_state = 100,max_depth=3, min_samples_leaf=5) \n",
    "  \n",
    "    # Performing training \n",
    "    clf_gini.fit(X_train, y_train) \n",
    "    return clf_gini "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Function to perform training with entropy. \n",
    "def tarin_using_entropy(X_train, X_test, y_train): \n",
    "  \n",
    "    # Decision tree with entropy \n",
    "    clf_entropy = DecisionTreeClassifier( \n",
    "            criterion = \"entropy\", random_state = 100, \n",
    "            max_depth = 3, min_samples_leaf = 5) \n",
    "  \n",
    "    # Performing training \n",
    "    clf_entropy.fit(X_train, y_train) \n",
    "    return clf_entropy "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Function to make predictions \n",
    "def prediction(X_test, clf_object): \n",
    "  \n",
    "    # Predicton on test with giniIndex \n",
    "    y_pred = clf_object.predict(X_test) \n",
    "    print(\"Predicted values:\") \n",
    "    print(y_pred) \n",
    "    return y_pred "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Function to calculate accuracy \n",
    "def cal_accuracy(y_test, y_pred): \n",
    "      \n",
    "    print(\"Confusion Matrix: \", \n",
    "        confusion_matrix(y_test, y_pred)) \n",
    "      \n",
    "    print (\"Accuracy : \", \n",
    "    accuracy_score(y_test,y_pred)*100) \n",
    "      \n",
    "    print(\"Report : \", \n",
    "    classification_report(y_test, y_pred)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Driver code \n",
    "def main(): \n",
    "      \n",
    "    # Building Phase \n",
    "    data = importdata() \n",
    "    X, Y, X_train, X_test, y_train, y_test = splitdataset(data) \n",
    "    clf_gini = train_using_gini(X_train, X_test, y_train) \n",
    "    clf_entropy = tarin_using_entropy(X_train, X_test, y_train) \n",
    "      \n",
    "    # Operational Phase \n",
    "    print(\"Results Using Gini Index:\") \n",
    "      \n",
    "    # Prediction using gini \n",
    "    y_pred_gini = prediction(X_test, clf_gini) \n",
    "    cal_accuracy(y_test, y_pred_gini) \n",
    "      \n",
    "    print(\"Results Using Entropy:\") \n",
    "    # Prediction using entropy \n",
    "    y_pred_entropy = prediction(X_test, clf_entropy) \n",
    "    cal_accuracy(y_test, y_pred_entropy) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Lenght:  158\n",
      "Dataset Shape:  (158, 7)\n",
      "Dataset:    HAPPY/UNHAPPY  Terror Atacks  Economy (GDP per Capita)  \\\n",
      "0         HAPPY            111                   1.39651   \n",
      "1         HAPPY              4                   1.30232   \n",
      "2         HAPPY             41                   1.32548   \n",
      "3         HAPPY             19                   1.45900   \n",
      "4         HAPPY             98                   1.32629   \n",
      "\n",
      "   Health (Life Expectancy)  Freedom  Trust (Government Corruption)  \\\n",
      "0                   0.94143  0.66557                        0.41978   \n",
      "1                   0.94784  0.62877                        0.14145   \n",
      "2                   0.87464  0.64938                        0.48357   \n",
      "3                   0.88521  0.66973                        0.36503   \n",
      "4                   0.90563  0.63297                        0.32957   \n",
      "\n",
      "       Country  \n",
      "0  Switzerland  \n",
      "1      Iceland  \n",
      "2      Denmark  \n",
      "3       Norway  \n",
      "4       Canada  \n",
      "Results Using Gini Index:\n",
      "Predicted values:\n",
      "['HAPPY' 'HAPPY' 'UNHAPPY' 'HAPPY' 'HAPPY' 'UNHAPPY' 'UNHAPPY' 'HAPPY'\n",
      " 'UNHAPPY' 'UNHAPPY' 'HAPPY' 'UNHAPPY' 'HAPPY' 'HAPPY' 'HAPPY' 'HAPPY'\n",
      " 'UNHAPPY' 'HAPPY' 'HAPPY' 'UNHAPPY' 'HAPPY' 'HAPPY' 'UNHAPPY' 'UNHAPPY'\n",
      " 'HAPPY' 'UNHAPPY' 'UNHAPPY' 'HAPPY' 'HAPPY' 'UNHAPPY' 'UNHAPPY' 'UNHAPPY'\n",
      " 'UNHAPPY' 'UNHAPPY' 'HAPPY' 'HAPPY' 'HAPPY' 'UNHAPPY' 'UNHAPPY' 'UNHAPPY'\n",
      " 'HAPPY' 'UNHAPPY' 'UNHAPPY' 'UNHAPPY' 'UNHAPPY' 'UNHAPPY' 'UNHAPPY'\n",
      " 'HAPPY']\n",
      "Confusion Matrix:  [[19  3]\n",
      " [ 3 23]]\n",
      "Accuracy :  87.5\n",
      "Report :               precision    recall  f1-score   support\n",
      "\n",
      "      HAPPY       0.86      0.86      0.86        22\n",
      "    UNHAPPY       0.88      0.88      0.88        26\n",
      "\n",
      "avg / total       0.88      0.88      0.88        48\n",
      "\n",
      "Results Using Entropy:\n",
      "Predicted values:\n",
      "['HAPPY' 'HAPPY' 'UNHAPPY' 'HAPPY' 'HAPPY' 'UNHAPPY' 'UNHAPPY' 'HAPPY'\n",
      " 'HAPPY' 'UNHAPPY' 'HAPPY' 'UNHAPPY' 'HAPPY' 'HAPPY' 'HAPPY' 'HAPPY'\n",
      " 'UNHAPPY' 'HAPPY' 'HAPPY' 'UNHAPPY' 'HAPPY' 'HAPPY' 'HAPPY' 'UNHAPPY'\n",
      " 'HAPPY' 'UNHAPPY' 'UNHAPPY' 'HAPPY' 'HAPPY' 'UNHAPPY' 'UNHAPPY' 'UNHAPPY'\n",
      " 'UNHAPPY' 'UNHAPPY' 'HAPPY' 'HAPPY' 'HAPPY' 'UNHAPPY' 'UNHAPPY' 'UNHAPPY'\n",
      " 'HAPPY' 'UNHAPPY' 'UNHAPPY' 'UNHAPPY' 'UNHAPPY' 'HAPPY' 'HAPPY' 'HAPPY']\n",
      "Confusion Matrix:  [[19  3]\n",
      " [ 7 19]]\n",
      "Accuracy :  79.1666666667\n",
      "Report :               precision    recall  f1-score   support\n",
      "\n",
      "      HAPPY       0.73      0.86      0.79        22\n",
      "    UNHAPPY       0.86      0.73      0.79        26\n",
      "\n",
      "avg / total       0.80      0.79      0.79        48\n",
      "\n"
     ]
    }
   ],
   "source": [
    "main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
